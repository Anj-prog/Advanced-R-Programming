factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
#  print(f)                          ## prints the value of f
}
evaluate_perf <- function(n){
factorial_perf <- microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n))
factorial_perf
}
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
evaluate_perf(12)
autoplot.microbenchmark(evaluate_perf(12))
evaluate_perf(13)
evaluate_perf_range <- function(n){
factorial_perf_range <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))
factorial_perf_range.df <- data.frame(factorial_perf_range)
print(factorial_perf_range.df)
}
for (i in 1:12){
evaluate_perf_range(i)
}
evaluate_perf_range <- function(n){
factorial_perf_range <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))
factorial_perf_range.df <- data.frame(factorial_perf_range)
print(factorial_perf_range.df)
} %>%
for (i in 1:12){}
evaluate_perf_range <- function(n){
factorial_perf_range <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))
factorial_perf_range.df <- data.frame(factorial_perf_range)
print(factorial_perf_range.df)
} %>%
for (i in 1:12){} %>%
print()
for (i in 1:12){
evaluate_perf_range(i)
}
evaluate_perf_range <- function(n){
factorial_perf_range <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))
factorial_perf_range.df <- data.frame(factorial_perf_range)
print(factorial_perf_range.df)
}
for (i in 1:12){
evaluate_perf_range(i)
}
for (i in 1:12){
print(i)
evaluate_perf_range(i)
}
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
#  print(f)                          ## prints the value of f
}
factorial_loop(0)
# Check that the function works:
factorial(0)
factorial_loop(0)
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
#  print(f)                          ## prints the value of f
}
# Check that the function works:
factorial(0)
factorial_loop(0); print(f)
factorial(8)
factorial_loop(8); print(f)
evaluate_perf <- function(n){
factorial_perf <- microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n))
factorial_perf
}
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
boxplot.microbenchmark(evaluate_perf(2))
evaluate_perf(2) %>%
autoplot.microbenchmark()
evaluate_perf(5) %>%
autoplot.microbenchmark()
evaluate_perf(2) %>%
print(); autoplot.microbenchmark()
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
evaluate_perf(5)
autoplot.microbenchmark(evaluate_perf(12))
autoplot.microbenchmark(evaluate_perf(5))
evaluate_perf(20)
autoplot.microbenchmark(evaluate_perf(20))
for (i in 20:10){
print(i)
evaluate_perf(i)
}
evaluate_perf(2)
evaluate_perf(5)
evaluate_perf(10)
evaluate_perf_loop <- function(n){
factorial_perf_loop <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))   #summarizes the result
factorial_perf_loop.df <- data.frame(factorial_perf_loop)           #presents the result as a data frame
print(factorial_perf_loop.df)                                       #prints the data frame
}
for (i in 20:10){
print(i)
evaluate_perf(i)
}
for (i in 20:10){
print(i)
evaluate_perf_loop(i)
}
warning()
warnings()
for (i in 20:10){
print(i)
evaluate_perf_loop(i)
warnings()
}
warnings()
evaluate_perf(15)
evaluate_perf(13)   #overflow warnings
evaluate_perf(12)
evaluate_perf_loop <- function(n){
factorial_perf_loop <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))   #summarizes the result
factorial_perf_loop.df <- data.frame(factorial_perf_loop)           #presents the result as a data frame
print(factorial_perf_loop.df)                                       #prints the data frame
}
for (i in 1:12){
print(i)
evaluate_perf_loop(i)
}
class(2)
class("is in session.")
class(class)
special_num_1 <- structure(1, class = "special_number")
class(special_num_1)
special_num_2 <- 2
class(special_num_2)
class(special_num_2) <- "special_number"
class(special_num_2)
shape_s3 <- function(side_lengths){
structure(list(side_lengths = side_lengths), class = "shape_S3")
}
square_4 <- shape_s3(c(4, 4, 4, 4))
class(square_4)
triangle_3 <- shape_s3(c(3, 3, 3))
class(triangle_3)
mean(c(2, 3, 7))
mean(c(as.Date("2016-09-01"), as.Date("2016-09-03")))
"[name of method]" <- function(x) UseMethod("[name of method]")
is_square <- function(x) UseMethod("is_square")
is_square.shape_S3 <- function(x){
length(x$side_lengths) == 4 &&
x$side_lengths[1] == x$side_lengths[2] &&
x$side_lengths[2] == x$side_lengths[3] &&
x$side_lengths[3] == x$side_lengths[4]
}
is_square(square_4)
is_square(triangle_3)
is_square.default <- function(x){
NA
}
is_square("square")
is_square(c(1, 1, 1, 1))
print(square_4)
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x)){
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
print(shape_s3(c(10, 10, 20, 20, 15)))
head(methods(print), 10)
class(square_4)
class(square_4) <- c("shape_S3", "square")
class(square_4)
inherits(square_4, "square")
# Access all the needed libraries:
library(dplyr)
library(ggplot2)
library(microbenchmark)
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
}
# Check that the function works (note that here, in order to see the value of f we need to print it):
factorial(0)
factorial_loop(0); print(f)
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
}
factorial_loop(0); print(f)
factorial(8)
factorial_loop(8); print(f)
# Check that the function works (note that here, in order to see the value of f we need to print it):
factorial(0)
factorial_loop(0) %>% print()
factorial(8)
factorial_loop(8) %>% print()
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
}
}
factorial(8)
factorial_loop(8) %>% print()
factorial_loop(8); print(f)
factorial_loop <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
f <- 1                          ## ... sets f equal to one
for(i in 1:n) {                 ## ... performs a for loop that iterates over the sequence 1 to n
f <- f*i                      ## ... and sets f equal to f (from the previous iteration) times the iterated value
}
f
}
}
# Check that the function works (note that here, in order to see the value of f we need to print it):
factorial(0)
factorial_loop(0) %>% print()
factorial(8)
factorial_loop(8); print(f)
factorial_loop(8) %>% print(f)
factorial_loop(8) %>% print()
factorial(8)
factorial_loop(8) %>% print()
factorial_reduce <- function(n) {   ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
print(f)                        ## Prints the value of f (reduce prints by default)
} else {                          ## Otherwise the function...
reduce(c(1:n), function(x, y) { ## ... uses reduce to iteratively combine the elements of 1:n ...
f <- x * y                    ## ... by applying function(x,y) = x*y to the elements and setting that value
})                              ##      equal to f
}
}
# Check that the function works:
factorial(0)
factorial_reduce(0)
factorial(8)
factorial_reduce(8)
factorial_func <- function(n) {     ## My function takes one input, n
stopifnot(n >= 0)                 ## It requires n to be non-negative
if (n == 0){                      ## If n equals 0, function returns 1, which is defined as the factorial of 0
f <- 1
} else {                          ## Otherwise the function...
n * factorial_func(n-1)         ## ... multiplies by n the previous iteration of the problem and returns the result
}
}
# Check that the function works:
factorial(0)
factorial_func(0)
factorial(8)
factorial_func(8)
fac_tbl <- c (1, rep(NA, 24))             ## Creates a simple table or a vector with 1 as a first element and then
##    24 NAs
factorial_mem <- function(n) {            ## My function takes one input, n
stopifnot(n >= 0)                       ## It requires n to be non-negative
if (n == 0){                            ## If n equals 0, function returns 1, which is defined as the factorial of 0
1
} else {                                ## Otherwise the function...
if(!is.na(fac_tbl[n])){               ## ... first checks whether the factorial of n is in fac_tbl-table
fac_tbl[n]                          ## ... and returns it if it is
} else {                              ## Otherwise the function...
fac_tbl[n-1] <<- factorial_mem(n-1) ## ... recursively calculates and stores the factorial of n
n * fac_tbl[n-1]                    ##      into the fac_tbl-table (Note that you need to use the complex
}                                     ##      assignment operator <<- in order to modify the table outside the
}                                       ##      the scope of the function)
}
# Check that the function works:
factorial(0)
factorial_mem(0)
factorial(8)
factorial_mem(8)
evaluate_perf <- function(n){
factorial_perf <- microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n))
factorial_perf
}
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
evaluate_perf(5)
evaluate_perf(10)
autoplot.microbenchmark(evaluate_perf(10))
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
evaluate_perf(5)
autoplot.microbenchmark(evaluate_perf(5))
evaluate_perf(10)
autoplot.microbenchmark(evaluate_perf(10))
evaluate_perf <- function(n){
factorial_perf <- microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n))
factorial_perf
}
evaluate_perf(2)
autoplot.microbenchmark(evaluate_perf(2))
evaluate_perf(5)
autoplot.microbenchmark(evaluate_perf(5))
evaluate_perf(10)
function (object, ..., log = TRUE, y_max = 1.05 * max(object$time))
autoplot.microbenchmark(evaluate_perf(10))
for (i in 1:12){
print(i)
evaluate_perf_loop(i)
}
evaluate_perf_loop <- function(n){
factorial_perf_loop <- summary(microbenchmark(factorial_loop(n),
factorial_reduce(n),
factorial_func(n),
factorial_mem(n)))   #summarizes the result
factorial_perf_loop.df <- data.frame(factorial_perf_loop)           #presents the result as a data frame
print(factorial_perf_loop.df)                                       #prints the data frame
}
for (i in 1:12){
print(i)
evaluate_perf_loop(i)
}
my_who <- function(person) UseMethod("my_who",person)
my_who.phd <- function(person) c("I am a PhD student",
NextMethod())
my_who.graduate <- function(person) c("I am a graduate student",
NextMethod()) # call next method
my_who.student <- function(person) c("I am a student")
graduate1 <- structure(1, class = c("graduate", "student"))
my_who(graduate1)
student1 <- structure(2, class = "student")
my_who(student1) # a student doesn't hae a Next method
phd1 <- structure(3, class = c("phd", "graduate", "student"))
my_who(phd1)
library(dplyr)
# Create a new S3 class called LongitudinalData
x_s3 <- function(x) {
structure(x, class = c("LongitudinalData", "data.frame"))
}
# Method "subject" under class LongitudinalData
subject <- function(data, n) UseMethod("subject")
# subject method of LongitudinalData object, the function returns a "Subject" object
subject.LongitudinalData <- function(data1, n) {
if (!(n %in% data[["id"]])) {
return(NULL) }
else {
subjectdata <- filter(data1, id == n)
structure(list(id = n, subjectdata = subjectdata), class = "Subject")
}
}
# read data
data <- read_csv("C:/Users/Computerlab/Downloads//MIE.csv")
# read data
data <- read_csv("/Users/anninorring/Documents/GitHub/Advanced-R-Programming_course/MIE.csv")
# convert data into a LongitudinalData object
x_new <- x_s3(data)
# subject method of the LongitudinalData object, returns a Subject object
out <- subject(x_new, 14)
# Print out
out
x <- make_LD(data)
print(class(x))
# Access all the needed libraries:
library(dplyr)
library(tidyr)
library(readr)
library(magrittr)
LongitudinalData <- function(df) {
structure(list(df = df), class = "LongitudinalData")
}
make_LD <- function(df) UseMethod("make_LD")
make_LD <- function(df) {
LongitudinalData(df)
}
subject <- function(x, subj_index) {
subj_df <- filter(x$df, id == subj_index)
structure(list(id = subj_df$id[1], subj_df = subj_df), class = "subject")
}
print.subject <- function(s) {
cat("Subject ID:", s$id)
}
summary.subject <- function(s) {
structure(list(s = s), class="subjectSummary")
}
print.subjectSummary <- function(ss) {
summary_df <- ss$s$subj_df %>% group_by(visit, room) %>% select(visit, room, value) %>% summarize(value=mean(value)) %>% spread(room, value)
print(paste("ID:", ss$s$id))
print(summary_df)
}
visit <- function(s, visit_index) {
structure(list(subj = s, visit_df = filter(s$subj_df, visit == visit_index), visit_index = visit_index), class = "visit")
}
room <- function(v, room_type) {
structure(list(visit = v, room_df = filter(v$visit_df, room == room_type), room_type = room_type), class = "room")
}
print.room <- function(r) {
print(paste("ID:", r$v$subj$id))
print(paste("Visit:", r$v$visit_index))
print(paste("Room:", r$room_type))
}
summary.room <- function(r) {
structure(list(r = r), class="roomSummary")
}
print.roomSummary <- function(rs) {
print(paste("ID:", rs$r$v$subj$id))
print(paste("Visit:", rs$r$v$visit_index))
print(paste("Room:", rs$r$room_type))
print(summary(rs$r$room_df$value))
}
## Read in the data
library(readr)
library(magrittr)
## Set the correct directory
setwd("/Users/anninorring/Documents/GitHub/Advanced-R-Programming_course")
source("oop_code.R")
data <- read_csv("MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
